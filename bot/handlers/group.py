from aiogram import Router, F
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery
from aiogram.filters import ChatMemberUpdatedFilter, KICKED, LEFT, MEMBER, ADMINISTRATOR, CREATOR, Command
from database.models import GroupMembersManager, LinksManager
from config import GROUP_ID, ADMIN_ID, TIMEZONE, CLASS_TYPES  # –î–û–î–ê–ù–û CLASS_TYPES
from datetime import datetime, timedelta
import pytz
import logging

logger = logging.getLogger(__name__)
router = Router()

# –†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä –∑ —Ç–æ—á–Ω–∏–º–∏ —á–∞—Å–∞–º–∏
CLASS_SCHEDULE = {
    1: {"start": "08:30", "end": "10:05", "break_start": "09:15", "break_end": "09:20"},
    2: {"start": "10:25", "end": "12:00", "break_start": "11:10", "break_end": "11:15"},
    3: {"start": "12:20", "end": "13:55", "break_start": "13:05", "break_end": "13:10"},
    4: {"start": "14:15", "end": "15:50", "break_start": "15:00", "break_end": "15:05"},
    5: {"start": "16:10", "end": "17:45", "break_start": "16:55", "break_end": "17:00"},
    6: {"start": "18:05", "end": "19:40", "break_start": "18:50", "break_end": "18:55"},
    7: {"start": "20:00", "end": "21:35", "break_start": "20:45", "break_end": "20:50"}
}

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED | LEFT))
async def on_user_leave(event: ChatMemberUpdated):
    """–ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏–¥–∞—î –≥—Ä—É–ø—É"""
    if event.chat.id != GROUP_ID:
        return
    
    user = event.new_chat_member.user
    
    # –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    success = await GroupMembersManager.remove_member(user.id)
    
    if success:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏–Ω—É–≤ –≥—Ä—É–ø—É: {user.username} ({user.id})")
    else:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.id}")

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER | ADMINISTRATOR | CREATOR))
async def on_user_join(event: ChatMemberUpdated):
    """–ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –≥—Ä—É–ø–∏"""
    if event.chat.id != GROUP_ID:
        return
    
    user = event.new_chat_member.user
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    success = await GroupMembersManager.add_member(
        user_id=user.id,
        username=user.username or '',
        first_name=user.first_name or '',
        last_name=user.last_name
    )
    
    if success:
        logger.info(f"–ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫ –¥–æ–¥–∞–Ω –¥–æ –≥—Ä—É–ø–∏: {user.username} ({user.id})")
    else:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏: {user.id}")

# –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø 1: –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∫–æ–º–∞–Ω–¥ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏
@router.message(F.chat.id == GROUP_ID, Command("schedule", "—Ä–æ–∑–∫–ª–∞–¥"))
async def group_schedule_command(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —Ä–æ–∑–∫–ª–∞–¥—É –≤ –≥—Ä—É–ø—ñ –∑ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏"""
    from bot.keyboards.user import get_schedule_inline_keyboard
    
    await message.reply(
        "üìÖ –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥:",
        reply_markup=get_schedule_inline_keyboard()
    )

# –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø 2: –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É /–ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –¥–æ /links
@router.message(F.chat.id == GROUP_ID, Command("links", "–ø–æ—Å–∏–ª–∞–Ω–Ω—è"))
async def group_links_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å —É –≥—Ä—É–ø—ñ (–ø—Ä–∞—Ü—é—î –∑ /links —Ç–∞ /–ø–æ—Å–∏–ª–∞–Ω–Ω—è)"""
    links = await LinksManager.get_all_links()
    
    if not links:
        await message.reply("üì≠ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ.")
        return
    
    response = "üîó **–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏:**\n\n"
    
    for link in links:
        subject = link.get('subject_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç')
        teacher = link.get('teacher_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–∫–ª–∞–¥–∞—á')
        class_type = link.get('class_type', '')
        meet_link = link.get('meet_link', '')
        classroom_link = link.get('classroom_link')
        
        response += f"üìö **{subject}**\n"
        response += f"üë®‚Äçüè´ {teacher} ({class_type})\n"
        response += f"üîó [–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è]({meet_link})\n"
        
        if classroom_link:
            response += f"üìñ [Classroom]({classroom_link})\n"
        
        response += "\n"
    
    await message.reply(response, parse_mode="Markdown", disable_web_page_preview=True)

@router.message(F.chat.id == GROUP_ID, Command("help", "–¥–æ–ø–æ–º–æ–≥–∞"))
async def group_help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ø–æ–º–æ–≥–∏ –≤ –≥—Ä—É–ø—ñ (–ø—Ä–∞—Ü—é—î –∑ /help —Ç–∞ /–¥–æ–ø–æ–º–æ–≥–∞)"""
    help_text = """
üìñ **–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø—ñ:**

üìÖ **–†–æ–∑–∫–ª–∞–¥:**
‚Ä¢ `/schedule` –∞–±–æ `/—Ä–æ–∑–∫–ª–∞–¥` - –º–µ–Ω—é —Ä–æ–∑–∫–ª–∞–¥—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏

üîó **–ü–æ—Å–∏–ª–∞–Ω–Ω—è:**
‚Ä¢ `/links` –∞–±–æ `/–ø–æ—Å–∏–ª–∞–Ω–Ω—è` - –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏

‚ùì **–Ü–Ω—à–µ:**
‚Ä¢ `/help` –∞–±–æ `/–¥–æ–ø–æ–º–æ–≥–∞` - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

üí° –î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–∞ –ø–∏—à—ñ—Ç—å –±–æ—Ç—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!
    """
    
    await message.reply(help_text)

# –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø 3: –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ –±–µ–∑ —Å–ª–µ—à—É
@router.message(F.chat.id == GROUP_ID, F.text.lower().in_(["–ø–æ—Å–∏–ª–∞–Ω–Ω—è", "—Å—Å—ã–ª–∫–∏", "links"]))
async def group_links_text(message: Message):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω—å"""
    await group_links_command(message)

@router.message(F.chat.id == GROUP_ID, F.text.lower().in_(["—Ä–æ–∑–∫–ª–∞–¥", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "schedule"]))
async def group_schedule_text(message: Message):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É"""
    await group_schedule_command(message)

@router.message(F.chat.id == GROUP_ID, F.text.lower().in_(["–¥–æ–ø–æ–º–æ–≥–∞", "–ø–æ–º–æ—â—å", "help"]))
async def group_help_text(message: Message):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏"""
    await group_help_command(message)

# –û–±—Ä–æ–±–∫–∞ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É –≤ –≥—Ä—É–ø—ñ
@router.callback_query(F.data.startswith("schedule_"), F.message.chat.id == GROUP_ID)
async def process_group_schedule_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ —Ä–æ–∑–∫–ª–∞–¥—É –≤ –≥—Ä—É–ø—ñ"""
    from bot.utils.api import ScheduleAPI
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    action = callback.data.replace("schedule_", "")
    
    if action == "today":
        schedule = await ScheduleAPI.get_today_schedule()
    elif action == "tomorrow":
        schedule = await ScheduleAPI.get_tomorrow_schedule()
    elif action == "current_week":
        schedule = await ScheduleAPI.get_week_schedule(0)
    elif action == "next_week":
        schedule = await ScheduleAPI.get_week_schedule(1)
    elif action == "back":
        from bot.keyboards.user import get_schedule_inline_keyboard
        await callback.message.edit_text(
            "üìÖ –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥:",
            reply_markup=get_schedule_inline_keyboard()
        )
        await callback.answer()
        return
    else:
        await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="schedule_back")]
    ])
    
    await callback.message.edit_text(schedule, reply_markup=back_keyboard)
    await callback.answer()

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –∑ —Ç–µ–∫—Å—Ç–æ–º (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
@router.message(F.chat.id == GROUP_ID, F.text.contains("—Å—å–æ–≥–æ–¥–Ω—ñ"))
async def group_today_schedule(message: Message):
    """–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    if any(word in message.text.lower() for word in ['/schedule', '/—Ä–æ–∑–∫–ª–∞–¥', '—Ä–æ–∑–∫–ª–∞–¥']):
        from bot.utils.api import ScheduleAPI
        schedule = await ScheduleAPI.get_today_schedule()
        await message.reply(schedule)

@router.message(F.chat.id == GROUP_ID, F.text.contains("–∑–∞–≤—Ç—Ä–∞"))
async def group_tomorrow_schedule(message: Message):
    """–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    if any(word in message.text.lower() for word in ['/schedule', '/—Ä–æ–∑–∫–ª–∞–¥', '—Ä–æ–∑–∫–ª–∞–¥']):
        from bot.utils.api import ScheduleAPI
        schedule = await ScheduleAPI.get_tomorrow_schedule()
        await message.reply(schedule)

@router.message(F.chat.id == GROUP_ID, F.text.contains("—Ç–∏–∂–¥–µ–Ω—å"))
async def group_week_schedule(message: Message):
    """–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    if any(word in message.text.lower() for word in ['/schedule', '/—Ä–æ–∑–∫–ª–∞–¥', '—Ä–æ–∑–∫–ª–∞–¥']):
        from bot.utils.api import ScheduleAPI
        if "–Ω–∞—Å—Ç—É–ø" in message.text.lower() or "next" in message.text.lower():
            schedule = await ScheduleAPI.get_week_schedule(1)
        else:
            schedule = await ScheduleAPI.get_week_schedule(0)
        await message.reply(schedule)

# –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø 4: –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≥—Ä—É–ø—ñ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
@router.message(F.chat.id == GROUP_ID)
async def handle_group_messages(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≥—Ä—É–ø—ñ"""
    user = message.from_user
    
    if not user:
        return
    
    # –Ø–∫—â–æ —Ü–µ –∞–¥–º—ñ–Ω - –¥–æ–¥–∞—î–º–æ –¥–æ –±–∞–∑–∏ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    if user.id == ADMIN_ID:
        is_member = await GroupMembersManager.is_member(user.id)
        if not is_member:
            await GroupMembersManager.add_member(
                user_id=user.id,
                username=user.username or '',
                first_name=user.first_name or '',
                last_name=user.last_name
            )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    is_member = await GroupMembersManager.is_member(user.id)
    
    if not is_member:
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏
        await GroupMembersManager.add_member(
            user_id=user.id,
            username=user.username or '',
            first_name=user.first_name or '',
            last_name=user.last_name
        )
        logger.info(f"–î–æ–¥–∞–Ω–æ —É—á–∞—Å–Ω–∏–∫–∞ –∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user.username} ({user.id})")

# –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø 5: –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
@router.message(F.chat.id == GROUP_ID, Command("test"))
async def test_command(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø—ñ"""
    await message.reply(
        f"‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ –≥—Ä—É–ø—ñ!\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message.from_user.first_name}\n"
        f"üÜî ID –≥—Ä—É–ø–∏: {message.chat.id}\n"
        f"ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±–æ—Ç–∞"
    )




def get_current_time():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É –≤ –∫–∏—ó–≤—Å—å–∫—ñ–π –∑–æ–Ω—ñ"""
    kiev_tz = pytz.timezone(TIMEZONE)
    return datetime.now(kiev_tz)

def time_from_string(time_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ä—è–¥–∫–∞ —á–∞—Å—É –≤ datetime –æ–±'—î–∫—Ç"""
    hour, minute = map(int, time_str.split(':'))
    current = get_current_time()
    return current.replace(hour=hour, minute=minute, second=0, microsecond=0)

async def get_current_class_info():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞—Ä—É"""
    from bot.utils.api import ScheduleAPI
    
    current_time = get_current_time()
    current_time_str = current_time.strftime('%H:%M')
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    schedule_data = await ScheduleAPI.get_schedule()
    if not schedule_data:
        return None, None
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —Ç–∞ —Ç–∏–∂–¥–µ–Ω—å
    today = current_time.strftime('%A')
    week_number = ScheduleAPI.get_week_number(current_time)
    week_key = 'scheduleFirstWeek' if week_number == 1 else 'scheduleSecondWeek'
    
    day_mapping = {
        'Monday': '–ü–Ω',
        'Tuesday': '–í–≤',
        'Wednesday': '–°—Ä',
        'Thursday': '–ß—Ç',
        'Friday': '–ü—Ç',
        'Saturday': '–°–±'
    }
    
    day_code = day_mapping.get(today)
    if not day_code:
        return None, None
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    week_schedule = schedule_data.get(week_key, [])
    today_classes = None
    
    for day_data in week_schedule:
        if day_data.get('day') == day_code:
            today_classes = day_data.get('pairs', [])
            break
    
    if not today_classes:
        return None, None
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞—Ä—É
    for i, class_data in enumerate(today_classes, 1):
        if i in CLASS_SCHEDULE:
            class_start = time_from_string(CLASS_SCHEDULE[i]["start"])
            class_end = time_from_string(CLASS_SCHEDULE[i]["end"])
            
            if class_start <= current_time <= class_end:
                return class_data, i
    
    return None, None

async def get_next_class_info():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—É"""
    from bot.utils.api import ScheduleAPI
    
    current_time = get_current_time()
    
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ
    schedule_data = await ScheduleAPI.get_schedule()
    if not schedule_data:
        return None, None, None
    
    # –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π —Ä–æ–∑–∫–ª–∞–¥
    today = current_time.strftime('%A')
    week_number = ScheduleAPI.get_week_number(current_time)
    week_key = 'scheduleFirstWeek' if week_number == 1 else 'scheduleSecondWeek'
    
    day_mapping = {
        'Monday': '–ü–Ω',
        'Tuesday': '–í–≤', 
        'Wednesday': '–°—Ä',
        'Thursday': '–ß—Ç',
        'Friday': '–ü—Ç',
        'Saturday': '–°–±'
    }
    
    day_code = day_mapping.get(today)
    if day_code:
        week_schedule = schedule_data.get(week_key, [])
        for day_data in week_schedule:
            if day_data.get('day') == day_code:
                today_classes = day_data.get('pairs', [])
                
                # –®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—É —Å—å–æ–≥–æ–¥–Ω—ñ
                for i, class_data in enumerate(today_classes, 1):
                    if i in CLASS_SCHEDULE:
                        class_start = time_from_string(CLASS_SCHEDULE[i]["start"])
                        if class_start > current_time:
                            return class_data, i, "—Å—å–æ–≥–æ–¥–Ω—ñ"
                break
    
    # –Ø–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–∞—Ä –Ω–µ–º–∞—î, —à—É–∫–∞—î–º–æ –∑–∞–≤—Ç—Ä–∞
    tomorrow = current_time + timedelta(days=1)
    tomorrow_day = tomorrow.strftime('%A')
    tomorrow_week_number = ScheduleAPI.get_week_number(tomorrow)
    tomorrow_week_key = 'scheduleFirstWeek' if tomorrow_week_number == 1 else 'scheduleSecondWeek'
    
    if tomorrow_day == 'Sunday':  # –Ø–∫—â–æ –∑–∞–≤—Ç—Ä–∞ –Ω–µ–¥—ñ–ª—è, —à—É–∫–∞—î–º–æ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫
        tomorrow = tomorrow + timedelta(days=1)
        tomorrow_day = 'Monday'
        tomorrow_week_number = ScheduleAPI.get_week_number(tomorrow)
        tomorrow_week_key = 'scheduleFirstWeek' if tomorrow_week_number == 1 else 'scheduleSecondWeek'
    
    tomorrow_day_code = day_mapping.get(tomorrow_day)
    if tomorrow_day_code:
        tomorrow_schedule = schedule_data.get(tomorrow_week_key, [])
        for day_data in tomorrow_schedule:
            if day_data.get('day') == tomorrow_day_code:
                tomorrow_classes = day_data.get('pairs', [])
                if tomorrow_classes:
                    return tomorrow_classes[0], 1, "–∑–∞–≤—Ç—Ä–∞"
                break
    
    return None, None, None

# –ù–û–í–Ü –ö–û–ú–ê–ù–î–ò –î–õ–Ø –ì–†–£–ü–ò

@router.message(F.chat.id == GROUP_ID, Command("now", "–∑–∞—Ä–∞–∑"))
async def group_current_class(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /now - –ø–æ—Ç–æ—á–Ω–∞ –ø–∞—Ä–∞"""
    class_data, class_number = await get_current_class_info()
    
    if not class_data:
        await message.reply("üì≠ –ó–∞—Ä–∞–∑ –ø–∞—Ä –Ω–µ–º–∞—î")
        return
    
    subject = class_data.get('name', '')
    teacher = class_data.get('teacherName', '')
    class_type = CLASS_TYPES.get(class_data.get('type', ''), class_data.get('type', ''))
    place = class_data.get('place', '')
    
    schedule_info = CLASS_SCHEDULE[class_number]
    
    response = f"üìö **–ü–æ—Ç–æ—á–Ω–∞ –ø–∞—Ä–∞ ({class_number}-–∞):**\n\n"
    response += f"üìñ **–ü—Ä–µ–¥–º–µ—Ç:** {subject}\n"
    response += f"üë®‚Äçüè´ **–í–∏–∫–ª–∞–¥–∞—á:** {teacher}\n"
    response += f"üìù **–¢–∏–ø:** {class_type}\n"
    response += f"‚è∞ **–ß–∞—Å:** {schedule_info['start']} - {schedule_info['end']}\n"
    
    if place:
        response += f"üìç **–ú—ñ—Å—Ü–µ:** {place}\n"
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫—â–æ —î
    from database.models import LinksManager
    link_data = await LinksManager.get_link(subject, teacher, class_data.get('type', ''))
    
    if link_data:
        meet_link = link_data.get('meet_link')
        classroom_link = link_data.get('classroom_link')
        
        if meet_link:
            response += f"üîó [–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è]({meet_link})\n"
        
        if classroom_link:
            response += f"üìñ [Classroom]({classroom_link})\n"
    
    await message.reply(response, parse_mode="Markdown", disable_web_page_preview=True)

@router.message(F.chat.id == GROUP_ID, Command("next", "–Ω–∞—Å—Ç—É–ø–Ω–∞"))
async def group_next_class(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /next - –Ω–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞"""
    class_data, class_number, when = await get_next_class_info()
    
    if not class_data:
        await message.reply("üì≠ –ù–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    subject = class_data.get('name', '')
    teacher = class_data.get('teacherName', '')
    class_type = CLASS_TYPES.get(class_data.get('type', ''), class_data.get('type', ''))
    place = class_data.get('place', '')
    
    schedule_info = CLASS_SCHEDULE[class_number]
    
    response = f"üìö **–ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞ ({when}):**\n\n"
    response += f"üìñ **–ü—Ä–µ–¥–º–µ—Ç:** {subject}\n"
    response += f"üë®‚Äçüè´ **–í–∏–∫–ª–∞–¥–∞—á:** {teacher}\n"
    response += f"üìù **–¢–∏–ø:** {class_type}\n"
    response += f"‚è∞ **–ß–∞—Å:** {schedule_info['start']} - {schedule_info['end']}\n"
    
    if place:
        response += f"üìç **–ú—ñ—Å—Ü–µ:** {place}\n"
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫—â–æ —î
    from database.models import LinksManager
    link_data = await LinksManager.get_link(subject, teacher, class_data.get('type', ''))
    
    if link_data:
        meet_link = link_data.get('meet_link')
        classroom_link = link_data.get('classroom_link')
        
        if meet_link:
            response += f"üîó [–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è]({meet_link})\n"
        
        if classroom_link:
            response += f"üìñ [Classroom]({classroom_link})\n"
    
    await message.reply(response, parse_mode="Markdown", disable_web_page_preview=True)

@router.message(F.chat.id == GROUP_ID, Command("left", "–∑–∞–ª–∏—à–∏–ª–æ—Å—å"))
async def group_time_left(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /left - —Å–∫—ñ–ª—å–∫–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –¥–æ –∫—ñ–Ω—Ü—è –ø–∞—Ä–∏"""
    class_data, class_number = await get_current_class_info()
    
    if not class_data:
        await message.reply("üì≠ –ó–∞—Ä–∞–∑ –ø–∞—Ä –Ω–µ–º–∞—î")
        return
    
    current_time = get_current_time()
    schedule_info = CLASS_SCHEDULE[class_number]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ—Ä–≤–∞
    break_start = time_from_string(schedule_info["break_start"])
    break_end = time_from_string(schedule_info["break_end"])
    class_end = time_from_string(schedule_info["end"])
    
    subject = class_data.get('name', '')
    
    if break_start <= current_time <= break_end:
        # –ó–∞—Ä–∞–∑ –ø–µ—Ä–µ—Ä–≤–∞
        time_left = (break_end - current_time).total_seconds()
        minutes = int(time_left // 60)
        seconds = int(time_left % 60)
        
        response = f"‚òïÔ∏è **–ó–∞—Ä–∞–∑ –ø–µ—Ä–µ—Ä–≤–∞ –Ω–∞ –ø–∞—Ä—ñ:**\n"
        response += f"üìñ {subject}\n\n"
        response += f"‚è∞ –î–æ –∫—ñ–Ω—Ü—è –ø–µ—Ä–µ—Ä–≤–∏: {minutes}—Ö–≤ {seconds}—Å"
    else:
        # –ô–¥–µ –ø–∞—Ä–∞
        time_left = (class_end - current_time).total_seconds()
        minutes = int(time_left // 60)
        seconds = int(time_left % 60)
        
        response = f"üìö **–ü–æ—Ç–æ—á–Ω–∞ –ø–∞—Ä–∞:**\n"
        response += f"üìñ {subject}\n\n"
        response += f"‚è∞ –î–æ –∫—ñ–Ω—Ü—è –ø–∞—Ä–∏: {minutes}—Ö–≤ {seconds}—Å"
    
    await message.reply(response)

@router.message(F.chat.id == GROUP_ID, Command("today", "—Å—å–æ–≥–æ–¥–Ω—ñ"))
async def group_today_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /today - —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤ –≥—Ä—É–ø—ñ"""
    from bot.utils.api import ScheduleAPI
    schedule = await ScheduleAPI.get_today_schedule()
    await message.reply(schedule)

@router.message(F.chat.id == GROUP_ID, Command("tomorrow", "–∑–∞–≤—Ç—Ä–∞"))
async def group_tomorrow_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /tomorrow - —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –≥—Ä—É–ø—ñ"""
    from bot.utils.api import ScheduleAPI
    schedule = await ScheduleAPI.get_tomorrow_schedule()
    await message.reply(schedule)