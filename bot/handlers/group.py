from aiogram import Router, F
from aiogram.types import Message, ChatMemberUpdated
from aiogram.filters import ChatMemberUpdatedFilter, KICKED, LEFT, MEMBER, ADMINISTRATOR, CREATOR
from database.models import GroupMembersManager
from config import GROUP_ID, ADMIN_ID
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED | LEFT))
async def on_user_leave(event: ChatMemberUpdated):
    """–ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏–¥–∞—î –≥—Ä—É–ø—É"""
    if event.chat.id != GROUP_ID:
        return
    
    user = event.new_chat_member.user
    
    # –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    success = await GroupMembersManager.remove_member(user.id)
    
    if success:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏–Ω—É–≤ –≥—Ä—É–ø—É: {user.username} ({user.id})")
    else:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.id}")

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER | ADMINISTRATOR | CREATOR))
async def on_user_join(event: ChatMemberUpdated):
    """–ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –≥—Ä—É–ø–∏"""
    if event.chat.id != GROUP_ID:
        return
    
    user = event.new_chat_member.user
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    success = await GroupMembersManager.add_member(
        user_id=user.id,
        username=user.username or '',
        first_name=user.first_name or '',
        last_name=user.last_name
    )
    
    if success:
        logger.info(f"–ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫ –¥–æ–¥–∞–Ω –¥–æ –≥—Ä—É–ø–∏: {user.username} ({user.id})")
    else:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏: {user.id}")

@router.message(F.chat.id == GROUP_ID)
async def handle_group_messages(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≥—Ä—É–ø—ñ"""
    user = message.from_user
    
    if not user:
        return
    
    # –Ø–∫—â–æ —Ü–µ –∞–¥–º—ñ–Ω - –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ
    if user.id == ADMIN_ID:
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    is_member = await GroupMembersManager.is_member(user.id)
    
    if not is_member:
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏
        await GroupMembersManager.add_member(
            user_id=user.id,
            username=user.username or '',
            first_name=user.first_name or '',
            last_name=user.last_name
        )
        logger.info(f"–î–æ–¥–∞–Ω–æ —É—á–∞—Å–Ω–∏–∫–∞ –∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user.username} ({user.id})")

@router.message(F.chat.id == GROUP_ID, F.text.startswith(("/schedule", "/—Ä–æ–∑–∫–ª–∞–¥")))
async def group_schedule_command(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —Ä–æ–∑–∫–ª–∞–¥—É –≤ –≥—Ä—É–ø—ñ"""
    from bot.utils.api import ScheduleAPI
    
    command_text = message.text.lower()
    
    if "—Å—å–æ–≥–æ–¥–Ω—ñ" in command_text or "today" in command_text:
        schedule = await ScheduleAPI.get_today_schedule()
    elif "–∑–∞–≤—Ç—Ä–∞" in command_text or "tomorrow" in command_text:
        schedule = await ScheduleAPI.get_tomorrow_schedule()
    elif "—Ç–∏–∂–¥–µ–Ω—å" in command_text or "week" in command_text:
        if "–Ω–∞—Å—Ç—É–ø" in command_text or "next" in command_text:
            schedule = await ScheduleAPI.get_week_schedule(1)
        else:
            schedule = await ScheduleAPI.get_week_schedule(0)
    else:
        schedule = await ScheduleAPI.get_today_schedule()
    
    await message.reply(schedule)

@router.message(F.chat.id == GROUP_ID, F.text.startswith(("/links", "/–ø–æ—Å–∏–ª–∞–Ω–Ω—è")))
async def group_links_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å —É –≥—Ä—É–ø—ñ"""
    from database.models import LinksManager
    
    links = await LinksManager.get_all_links()
    
    if not links:
        await message.reply("üì≠ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ.")
        return
    
    response = "üîó **–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏:**\n\n"
    
    for link in links:
        subject = link.get('subject_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç')
        teacher = link.get('teacher_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–∫–ª–∞–¥–∞—á')
        class_type = link.get('class_type', '')
        meet_link = link.get('meet_link', '')
        classroom_link = link.get('classroom_link')
        
        response += f"üìö **{subject}**\n"
        response += f"üë®‚Äçüè´ {teacher} ({class_type})\n"
        response += f"üîó [–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è]({meet_link})\n"
        
        if classroom_link:
            response += f"üìñ [Classroom]({classroom_link})\n"
        
        response += "\n"
    
    await message.reply(response, parse_mode="Markdown", disable_web_page_preview=True)

@router.message(F.chat.id == GROUP_ID, F.text.startswith("/help"))
async def group_help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ø–æ–º–æ–≥–∏ –≤ –≥—Ä—É–ø—ñ"""
    help_text = """
üìñ **–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø—ñ:**

üìÖ **–†–æ–∑–∫–ª–∞–¥:**
‚Ä¢ `/schedule` –∞–±–æ `/—Ä–æ–∑–∫–ª–∞–¥` - —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
‚Ä¢ `/schedule –∑–∞–≤—Ç—Ä–∞` - —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
‚Ä¢ `/schedule —Ç–∏–∂–¥–µ–Ω—å` - –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
‚Ä¢ `/schedule –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å` - –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å

üîó **–ü–æ—Å–∏–ª–∞–Ω–Ω—è:**
‚Ä¢ `/links` –∞–±–æ `/–ø–æ—Å–∏–ª–∞–Ω–Ω—è` - –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏

‚ùì **–Ü–Ω—à–µ:**
‚Ä¢ `/help` - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

üí° –î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–∞ –ø–∏—à—ñ—Ç—å –±–æ—Ç—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!
    """
    
    await message.reply(help_text)