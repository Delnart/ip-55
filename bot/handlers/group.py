from aiogram import Router, F
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery
from aiogram.filters import ChatMemberUpdatedFilter, KICKED, LEFT, MEMBER, ADMINISTRATOR, CREATOR, Command
from database.models import GroupMembersManager
from config import GROUP_ID, ADMIN_ID
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED | LEFT))
async def on_user_leave(event: ChatMemberUpdated):
    """–ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏–¥–∞—î –≥—Ä—É–ø—É"""
    if event.chat.id != GROUP_ID:
        return
    
    user = event.new_chat_member.user
    
    # –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    success = await GroupMembersManager.remove_member(user.id)
    
    if success:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏–Ω—É–≤ –≥—Ä—É–ø—É: {user.username} ({user.id})")
    else:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.id}")

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER | ADMINISTRATOR | CREATOR))
async def on_user_join(event: ChatMemberUpdated):
    """–ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –≥—Ä—É–ø–∏"""
    if event.chat.id != GROUP_ID:
        return
    
    user = event.new_chat_member.user
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    success = await GroupMembersManager.add_member(
        user_id=user.id,
        username=user.username or '',
        first_name=user.first_name or '',
        last_name=user.last_name
    )
    
    if success:
        logger.info(f"–ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫ –¥–æ–¥–∞–Ω –¥–æ –≥—Ä—É–ø–∏: {user.username} ({user.id})")
    else:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏: {user.id}")

@router.message(F.chat.id == GROUP_ID)
async def handle_group_messages(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≥—Ä—É–ø—ñ"""
    user = message.from_user
    
    if not user:
        return
    
    # –Ø–∫—â–æ —Ü–µ –∞–¥–º—ñ–Ω - –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –∞–ª–µ –¥–æ–¥–∞—î–º–æ –¥–æ –±–∞–∑–∏
    if user.id == ADMIN_ID:
        # –î–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω–∞ –¥–æ –±–∞–∑–∏ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        is_member = await GroupMembersManager.is_member(user.id)
        if not is_member:
            await GroupMembersManager.add_member(
                user_id=user.id,
                username=user.username or '',
                first_name=user.first_name or '',
                last_name=user.last_name
            )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    is_member = await GroupMembersManager.is_member(user.id)
    
    if not is_member:
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏
        await GroupMembersManager.add_member(
            user_id=user.id,
            username=user.username or '',
            first_name=user.first_name or '',
            last_name=user.last_name
        )
        logger.info(f"–î–æ–¥–∞–Ω–æ —É—á–∞—Å–Ω–∏–∫–∞ –∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user.username} ({user.id})")

@router.message(F.chat.id == GROUP_ID, Command("schedule", "—Ä–æ–∑–∫–ª–∞–¥"))
async def group_schedule_command(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —Ä–æ–∑–∫–ª–∞–¥—É –≤ –≥—Ä—É–ø—ñ –∑ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏"""
    from bot.keyboards.user import get_schedule_inline_keyboard
    
    await message.reply(
        "üìÖ –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥:",
        reply_markup=get_schedule_inline_keyboard()
    )

# –û–±—Ä–æ–±–∫–∞ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É –≤ –≥—Ä—É–ø—ñ
@router.callback_query(F.data.startswith("schedule_"), F.message.chat.id == GROUP_ID)
async def process_group_schedule_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ —Ä–æ–∑–∫–ª–∞–¥—É –≤ –≥—Ä—É–ø—ñ"""
    from bot.utils.api import ScheduleAPI
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    action = callback.data.replace("schedule_", "")
    
    if action == "today":
        schedule = await ScheduleAPI.get_today_schedule()
    elif action == "tomorrow":
        schedule = await ScheduleAPI.get_tomorrow_schedule()
    elif action == "current_week":
        schedule = await ScheduleAPI.get_week_schedule(0)
    elif action == "next_week":
        schedule = await ScheduleAPI.get_week_schedule(1)
    elif action == "back":
        from bot.keyboards.user import get_schedule_inline_keyboard
        await callback.message.edit_text(
            "üìÖ –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥:",
            reply_markup=get_schedule_inline_keyboard()
        )
        await callback.answer()
        return
    else:
        await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="schedule_back")]
    ])
    
    await callback.message.edit_text(schedule, reply_markup=back_keyboard)
    await callback.answer()

@router.message(F.chat.id == GROUP_ID, Command("links", "–ø–æ—Å–∏–ª–∞–Ω–Ω—è"))
async def group_links_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å —É –≥—Ä—É–ø—ñ"""
    from database.models import LinksManager
    
    links = await LinksManager.get_all_links()
    
    if not links:
        await message.reply("üì≠ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ.")
        return
    
    response = "üîó **–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏:**\n\n"
    
    for link in links:
        subject = link.get('subject_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç')
        teacher = link.get('teacher_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–∫–ª–∞–¥–∞—á')
        class_type = link.get('class_type', '')
        meet_link = link.get('meet_link', '')
        classroom_link = link.get('classroom_link')
        
        response += f"üìö **{subject}**\n"
        response += f"üë®‚Äçüè´ {teacher} ({class_type})\n"
        response += f"üîó [–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è]({meet_link})\n"
        
        if classroom_link:
            response += f"üìñ [Classroom]({classroom_link})\n"
        
        response += "\n"
    
    await message.reply(response, parse_mode="Markdown", disable_web_page_preview=True)

@router.message(F.chat.id == GROUP_ID, Command("help"))
async def group_help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ø–æ–º–æ–≥–∏ –≤ –≥—Ä—É–ø—ñ"""
    help_text = """
üìñ **–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø—ñ:**

üìÖ **–†–æ–∑–∫–ª–∞–¥:**
‚Ä¢ `/schedule` –∞–±–æ `/—Ä–æ–∑–∫–ª–∞–¥` - –º–µ–Ω—é —Ä–æ–∑–∫–ª–∞–¥—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
‚Ä¢ –ú–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –ø–∏—Å–∞—Ç–∏:
  - `/schedule —Å—å–æ–≥–æ–¥–Ω—ñ` - —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
  - `/schedule –∑–∞–≤—Ç—Ä–∞` - —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
  - `/schedule —Ç–∏–∂–¥–µ–Ω—å` - –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
  - `/schedule –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å` - –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å

üîó **–ü–æ—Å–∏–ª–∞–Ω–Ω—è:**
‚Ä¢ `/links` –∞–±–æ `/–ø–æ—Å–∏–ª–∞–Ω–Ω—è` - –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏

‚ùì **–Ü–Ω—à–µ:**
‚Ä¢ `/help` - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

üí° –î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–∞ –ø–∏—à—ñ—Ç—å –±–æ—Ç—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!
    """
    
    await message.reply(help_text)

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –∑ —Ç–µ–∫—Å—Ç–æ–º (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
@router.message(F.chat.id == GROUP_ID, F.text.contains("—Å—å–æ–≥–æ–¥–Ω—ñ"))
async def group_today_schedule(message: Message):
    """–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    if any(word in message.text.lower() for word in ['/schedule', '/—Ä–æ–∑–∫–ª–∞–¥', '—Ä–æ–∑–∫–ª–∞–¥']):
        from bot.utils.api import ScheduleAPI
        schedule = await ScheduleAPI.get_today_schedule()
        await message.reply(schedule)

@router.message(F.chat.id == GROUP_ID, F.text.contains("–∑–∞–≤—Ç—Ä–∞"))
async def group_tomorrow_schedule(message: Message):
    """–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    if any(word in message.text.lower() for word in ['/schedule', '/—Ä–æ–∑–∫–ª–∞–¥', '—Ä–æ–∑–∫–ª–∞–¥']):
        from bot.utils.api import ScheduleAPI
        schedule = await ScheduleAPI.get_tomorrow_schedule()
        await message.reply(schedule)

@router.message(F.chat.id == GROUP_ID, F.text.contains("—Ç–∏–∂–¥–µ–Ω—å"))
async def group_week_schedule(message: Message):
    """–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    if any(word in message.text.lower() for word in ['/schedule', '/—Ä–æ–∑–∫–ª–∞–¥', '—Ä–æ–∑–∫–ª–∞–¥']):
        from bot.utils.api import ScheduleAPI
        if "–Ω–∞—Å—Ç—É–ø" in message.text.lower() or "next" in message.text.lower():
            schedule = await ScheduleAPI.get_week_schedule(1)
        else:
            schedule = await ScheduleAPI.get_week_schedule(0)
        await message.reply(schedule)