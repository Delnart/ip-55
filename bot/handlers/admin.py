from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import LinksManager, GroupMembersManager
from bot.keyboards.admin import (
    get_admin_keyboard, 
    get_link_type_keyboard, 
    get_cancel_keyboard,
    get_confirm_delete_keyboard
)
from bot.keyboards.user import get_main_keyboard
import logging

logger = logging.getLogger(__name__)
router = Router()

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class AddLinkStates(StatesGroup):
    waiting_for_type = State()
    waiting_for_subject = State()
    waiting_for_teacher = State()
    waiting_for_meet_link = State()
    waiting_for_classroom_link = State()

class DeleteLinkStates(StatesGroup):
    waiting_for_selection = State()

# –§—ñ–ª—å—Ç—Ä –¥–ª—è –∞–¥–º—ñ–Ω–∞
def admin_only():
    async def check(message: Message, is_admin: bool) -> bool:
        if not is_admin:
            await message.answer("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return False
        return True
    return check

@router.message(Command("admin"), admin_only())
async def cmd_admin(message: Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin_text = """
üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
‚Ä¢ ‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä—É
‚Ä¢ üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
‚Ä¢ üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≥—Ä—É–ø–∏
‚Ä¢ üóë –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
‚Ä¢ ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:
    """
    
    await message.answer(admin_text, reply_markup=get_admin_keyboard())

@router.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", admin_only())
async def start_add_link(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""
    await message.answer(
        "üîó **–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä—É**\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–Ω—è—Ç—Ç—è:",
        reply_markup=get_link_type_keyboard()
    )
    await state.set_state(AddLinkStates.waiting_for_type)

@router.callback_query(F.data.startswith("link_type_"), AddLinkStates.waiting_for_type)
async def process_link_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∑–∞–Ω—è—Ç—Ç—è"""
    class_type = callback.data.replace("link_type_", "")
    
    await state.update_data(class_type=class_type)
    
    await callback.message.edit_text(
        f"üìö **–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è ({class_type})**\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç–∞:",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(AddLinkStates.waiting_for_subject)
    await callback.answer()

@router.message(AddLinkStates.waiting_for_subject)
async def process_subject_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    subject_name = message.text.strip()
    
    if len(subject_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É:")
        return
    
    await state.update_data(subject_name=subject_name)
    
    await message.answer(
        f"üë®‚Äçüè´ **–ü—Ä–µ–¥–º–µ—Ç:** {subject_name}\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –≤–∏–∫–ª–∞–¥–∞—á–∞:",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(AddLinkStates.waiting_for_teacher)

@router.message(AddLinkStates.waiting_for_teacher)
async def process_teacher_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ü–Ü–ë –≤–∏–∫–ª–∞–¥–∞—á–∞"""
    teacher_name = message.text.strip()
    
    if len(teacher_name) < 5:
        await message.answer("‚ùå –ü–Ü–ë –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ. –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ –ü–Ü–ë:")
        return
    
    await state.update_data(teacher_name=teacher_name)
    
    data = await state.get_data()
    
    await message.answer(
        f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {data['subject_name']}\n"
        f"üë®‚Äçüè´ **–í–∏–∫–ª–∞–¥–∞—á:** {teacher_name}\n"
        f"üìù **–¢–∏–ø:** {data['class_type']}\n\n"
        "üîó –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á (Google Meet/Zoom):",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(AddLinkStates.waiting_for_meet_link)

@router.message(AddLinkStates.waiting_for_meet_link)
async def process_meet_link(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á"""
    meet_link = message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –≤–∞–ª—ñ–¥–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    if not (meet_link.startswith('http://') or meet_link.startswith('https://')):
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ http:// –∞–±–æ https://):")
        return
    
    await state.update_data(meet_link=meet_link)
    
    await message.answer(
        "üìñ **–û–ø—Ü—ñ–π–Ω–æ:** –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Classroom (–∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'):",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(AddLinkStates.waiting_for_classroom_link)

@router.message(AddLinkStates.waiting_for_classroom_link)
async def process_classroom_link(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Classroom"""
    classroom_link = None
    
    if message.text.strip().lower() not in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip', '-']:
        classroom_link = message.text.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –≤–∞–ª—ñ–¥–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        if not (classroom_link.startswith('http://') or classroom_link.startswith('https://')):
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':")
            return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
    data = await state.get_data()
    
    success = await LinksManager.add_link(
        subject_name=data['subject_name'],
        teacher_name=data['teacher_name'],
        class_type=data['class_type'],
        meet_link=data['meet_link'],
        classroom_link=classroom_link
    )
    
    if success:
        response = "‚úÖ **–ü–æ—Å–∏–ª–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!**\n\n"
        response += f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {data['subject_name']}\n"
        response += f"üë®‚Äçüè´ **–í–∏–∫–ª–∞–¥–∞—á:** {data['teacher_name']}\n"
        response += f"üìù **–¢–∏–ø:** {data['class_type']}\n"
        response += f"üîó **–ó—É—Å—Ç—Ä—ñ—á:** {data['meet_link']}\n"
        
        if classroom_link:
            response += f"üìñ **Classroom:** {classroom_link}\n"
        
        await message.answer(response, reply_markup=get_admin_keyboard())
    else:
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@router.message(F.text == "üìã –í—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", admin_only())
async def show_all_links_admin(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω –≤–µ—Ä—Å—ñ—è)"""
    links = await LinksManager.get_all_links()
    
    if not links:
        await message.answer("üì≠ –ü–æ—Å–∏–ª–∞–Ω–Ω—è —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ.")
        return
    
    response = "üîó **–í—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏:**\n\n"
    
    for i, link in enumerate(links, 1):
        subject = link.get('subject_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç')
        teacher = link.get('teacher_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–∫–ª–∞–¥–∞—á')
        class_type = link.get('class_type', '')
        meet_link = link.get('meet_link', '')
        classroom_link = link.get('classroom_link')
        
        response += f"**{i}. {subject}**\n"
        response += f"üë®‚Äçüè´ {teacher} ({class_type})\n"
        response += f"üîó {meet_link}\n"
        
        if classroom_link:
            response += f"üìñ {classroom_link}\n"
        
        response += "\n"
    
    await message.answer(response, parse_mode="Markdown", disable_web_page_preview=True)

@router.message(F.text == "üë• –£—á–∞—Å–Ω–∏–∫–∏ –≥—Ä—É–ø–∏", admin_only())
async def show_group_members(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≥—Ä—É–ø–∏"""
    members = await GroupMembersManager.get_all_members()
    
    if not members:
        await message.answer("üì≠ –£—á–∞—Å–Ω–∏–∫—ñ–≤ –≥—Ä—É–ø–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    response = f"üë• **–£—á–∞—Å–Ω–∏–∫–∏ –≥—Ä—É–ø–∏ ({len(members)}):**\n\n"
    
    for i, member in enumerate(members, 1):
        username = member.get('username', '–ë–µ–∑ username')
        first_name = member.get('first_name', '')
        last_name = member.get('last_name', '')
        user_id = member.get('user_id', '')
        
        full_name = f"{first_name} {last_name}".strip()
        if not full_name:
            full_name = "–Ü–º'—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
        
        response += f"{i}. **{full_name}**\n"
        response += f"   @{username} (ID: {user_id})\n\n"
    
    await message.answer(response, parse_mode="Markdown")

@router.message(F.text == "üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", admin_only())
async def switch_to_user_mode(message: Message):
    """–ü–µ—Ä–µ—Ö—ñ–¥ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π —Ä–µ–∂–∏–º"""
    await message.answer(
        "üë§ –ü–µ—Ä–µ—Ö—ñ–¥ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π —Ä–µ–∂–∏–º.\n\n"
        "–î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /admin",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π
@router.callback_query(F.data.in_(["cancel", "cancel_add_link"]))
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup=None
    )
    await callback.answer("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")