# bot/handlers/homework_admin.py - –ù–û–í–ò–ô –§–ê–ô–õ

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import pytz
from database.homework import HomeworkManager, StudentProfileManager, FileManager
from config import TIMEZONE, GROUP_ID
import io
import zipfile
import logging

logger = logging.getLogger(__name__)
router = Router()

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class CreateHomeworkStates(StatesGroup):
    waiting_for_subject = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_deadline = State()

class SetStudentNameStates(StatesGroup):
    waiting_for_user_selection = State()
    waiting_for_name = State()

@router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –î–ó")
async def homework_admin_menu(message: Message, is_admin: bool):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ–º–∞—à–Ω—ñ–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏"""
    if not is_admin:
        await message.answer("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –î–ó", callback_data="hw_create"),
            InlineKeyboardButton(text="üìã –í—Å—ñ –î–ó", callback_data="hw_list")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="hw_stats"),
            InlineKeyboardButton(text="üë• –Ü–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤", callback_data="hw_names")
        ],
        [
            InlineKeyboardButton(text="üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏", callback_data="hw_download"),
            InlineKeyboardButton(text="üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data="hw_remind")
        ]
    ]
    
    await message.answer(
        "üìù **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ–º–∞—à–Ω—ñ–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏**\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data == "hw_create")
async def start_create_homework(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –î–ó"""
    await callback.message.edit_text(
        "üìù **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è**\n\n"
        "–ö—Ä–æ–∫ 1/4: –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç–∞:"
    )
    
    await state.set_state(CreateHomeworkStates.waiting_for_subject)
    await callback.answer()

@router.message(CreateHomeworkStates.waiting_for_subject)
async def process_hw_subject(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
    subject = message.text.strip()
    
    if len(subject) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(subject_name=subject)
    await message.answer(
        f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {subject}\n\n"
        "–ö—Ä–æ–∫ 2/4: –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è:"
    )
    
    await state.set_state(CreateHomeworkStates.waiting_for_title)

@router.message(CreateHomeworkStates.waiting_for_title)
async def process_hw_title(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –î–ó"""
    title = message.text.strip()
    
    if len(title) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(title=title)
    data = await state.get_data()
    
    await message.answer(
        f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {data['subject_name']}\n"
        f"üìã **–ù–∞–∑–≤–∞:** {title}\n\n"
        "–ö—Ä–æ–∫ 3/4: –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è (–∞–±–æ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'):"
    )
    
    await state.set_state(CreateHomeworkStates.waiting_for_description)

@router.message(CreateHomeworkStates.waiting_for_description)
async def process_hw_description(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É –î–ó"""
    description = message.text.strip()
    
    if description.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip', '-']:
        description = ""
    
    await state.update_data(description=description)
    data = await state.get_data()
    
    response = f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {data['subject_name']}\n"
    response += f"üìã **–ù–∞–∑–≤–∞:** {data['title']}\n"
    
    if description:
        response += f"üìù **–û–ø–∏—Å:** {description[:100]}{'...' if len(description) > 100 else ''}\n"
    
    response += "\n–ö—Ä–æ–∫ 4/4: –í–≤–µ–¥—ñ—Ç—å –¥–µ–¥–ª–∞–π–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
    response += "‚Ä¢ `–î–î.–ú–ú –ì–ì–ì–ì –ì–ì:–•–•` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15.12 2024 23:59)\n"
    response += "‚Ä¢ `–î–î.–ú–ú –ì–ì:–•–•` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15.12 23:59)\n"
    response += "‚Ä¢ `–∑–∞–≤—Ç—Ä–∞ –ì–ì:–•–•` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –∑–∞–≤—Ç—Ä–∞ 23:59)\n"
    response += "‚Ä¢ `+–• –¥–Ω—ñ–≤` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +3 –¥–Ω—ñ)"
    
    await message.answer(response)
    await state.set_state(CreateHomeworkStates.waiting_for_deadline)

@router.message(CreateHomeworkStates.waiting_for_deadline)
async def process_hw_deadline(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–µ–¥–ª–∞–π–Ω—É"""
    deadline_text = message.text.strip()
    
    try:
        kiev_tz = pytz.timezone(TIMEZONE)
        now = datetime.now(kiev_tz)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –¥–∞—Ç–∏
        deadline = None
        
        if deadline_text.startswith("–∑–∞–≤—Ç—Ä–∞"):
            # –ó–∞–≤—Ç—Ä–∞ + —á–∞—Å
            time_part = deadline_text.replace("–∑–∞–≤—Ç—Ä–∞", "").strip()
            if time_part:
                hour, minute = map(int, time_part.split(':'))
                deadline = now.replace(hour=hour, minute=minute, second=0, microsecond=0) + timedelta(days=1)
            else:
                deadline = now.replace(hour=23, minute=59, second=0, microsecond=0) + timedelta(days=1)
                
        elif deadline_text.startswith("+"):
            # +X –¥–Ω—ñ–≤
            days_str = deadline_text.replace("+", "").replace("–¥–Ω—ñ–≤", "").replace("–¥–Ω—ñ", "").replace("–¥–µ–Ω—å", "").strip()
            days = int(days_str)
            deadline = now.replace(hour=23, minute=59, second=0, microsecond=0) + timedelta(days=days)
            
        elif len(deadline_text.split()) == 2:
            # –î–î.–ú–ú –ì–ì:–•–• (–ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫)
            date_part, time_part = deadline_text.split()
            day, month = map(int, date_part.split('.'))
            hour, minute = map(int, time_part.split(':'))
            
            year = now.year
            if month < now.month or (month == now.month and day < now.day):
                year += 1  # –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–∫ —è–∫—â–æ –¥–∞—Ç–∞ –≤ –º–∏–Ω—É–ª–æ–º—É
                
            deadline = kiev_tz.localize(datetime(year, month, day, hour, minute))
            
        elif len(deadline_text.split()) == 3:
            # –î–î.–ú–ú –ì–ì–ì–ì –ì–ì:–•–•
            date_part, year_part, time_part = deadline_text.split()
            day, month = map(int, date_part.split('.'))
            year = int(year_part)
            hour, minute = map(int, time_part.split(':'))
            
            deadline = kiev_tz.localize(datetime(year, month, day, hour, minute))
        
        if not deadline or deadline <= now:
            await message.answer("‚ùå –î–µ–¥–ª–∞–π–Ω –º–∞—î –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –î–ó
        data = await state.get_data()
        homework_id = await HomeworkManager.create_homework(
            subject_name=data['subject_name'],
            title=data['title'],
            description=data['description'],
            deadline=deadline.replace(tzinfo=None),  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ UTC
            created_by=message.from_user.id
        )
        
        if homework_id:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É
            group_message = f"üìù **–ù–æ–≤–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è!**\n\n"
            group_message += f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {data['subject_name']}\n"
            group_message += f"üìã **–ó–∞–≤–¥–∞–Ω–Ω—è:** {data['title']}\n"
            
            if data['description']:
                group_message += f"üìù **–û–ø–∏—Å:** {data['description']}\n"
            
            group_message += f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {deadline.strftime('%d.%m.%Y %H:%M')}\n\n"
            group_message += "üí° –î–ª—è –∑–¥–∞—á—ñ –ø–∏—à—ñ—Ç—å –±–æ—Ç—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!"
            
            await message.bot.send_message(
                chat_id=GROUP_ID,
                text=group_message
            )
            
            await message.answer(
                "‚úÖ **–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!**\n\n"
                f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {data['subject_name']}\n"
                f"üìã **–ù–∞–∑–≤–∞:** {data['title']}\n"
                f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {deadline.strftime('%d.%m.%Y %H:%M')}\n\n"
                "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø—É."
            )
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        
        await state.clear()
        
    except ValueError as e:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:\n{str(e)}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –î–ó: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è.")

@router.callback_query(F.data == "hw_list")
async def list_homework(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –î–ó"""
    homework_list = await HomeworkManager.get_active_homework()
    
    if not homework_list:
        await callback.message.edit_text("üì≠ –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î.")
        return
    
    response = "üìã **–ê–∫—Ç–∏–≤–Ω—ñ –¥–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:**\n\n"
    
    keyboard = []
    
    for hw in homework_list:
        hw_id = str(hw['_id'])
        subject = hw['subject_name']
        title = hw['title']
        deadline = hw['deadline']
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–¥–∞—á
        submissions_count = len(hw.get('submissions', []))
        
        response += f"üìö **{subject}**\n"
        response += f"üìã {title}\n"
        response += f"‚è∞ –î–æ: {deadline.strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üìä –ó–¥–∞–ª–∏: {submissions_count}\n\n"
        
        keyboard.append([
            InlineKeyboardButton(
                text=f"üìä {title[:20]}...",
                callback_data=f"hw_view_{hw_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="hw_back_menu")
    ])
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("hw_view_"))
async def view_homework_details(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ –î–ó"""
    homework_id = callback.data.replace("hw_view_", "")
    stats = await HomeworkManager.get_homework_statistics(homework_id)
    
    if not stats:
        await callback.answer("‚ùå –î–ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    hw = stats['homework']
    
    response = f"üìã **–î–µ—Ç–∞–ª—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:**\n\n"
    response += f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {hw['subject_name']}\n"
    response += f"üìã **–ù–∞–∑–≤–∞:** {hw['title']}\n"
    
    if hw['description']:
        response += f"üìù **–û–ø–∏—Å:** {hw['description']}\n"
    
    response += f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {hw['deadline'].strftime('%d.%m.%Y %H:%M')}\n\n"
    
    response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    response += f"‚Ä¢ –í—Å—å–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤: {stats['total_students']}\n"
    response += f"‚Ä¢ –ó–¥–∞–ª–∏: {stats['submitted_count']}\n"
    response += f"‚Ä¢ –ù–µ –∑–¥–∞–ª–∏: {stats['not_submitted_count']}\n\n"
    
    if stats['submissions']:
        response += "üë• **–ó–¥–∞–ª–∏ —Ä–æ–±–æ—Ç–∏:**\n"
        for submission in stats['submissions']:
            name = submission.get('full_name', submission.get('username', '–Ü–º\'—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'))
            submitted_time = submission['submitted_at'].strftime('%d.%m %H:%M')
            response += f"‚Ä¢ {name} ({submitted_time})\n"
    
    keyboard = [
        [
            InlineKeyboardButton(text="üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏", callback_data=f"hw_download_{homework_id}"),
            InlineKeyboardButton(text="üîî –ù–∞–≥–∞–¥–∞—Ç–∏", callback_data=f"hw_remind_{homework_id}")
        ],
        [
            InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä–∏—Ç–∏ –î–ó", callback_data=f"hw_close_{homework_id}"),
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="hw_list")
        ]
    ]
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("hw_download_"))
async def download_homework_files(callback: CallbackQuery):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –î–ó —è–∫ –∞—Ä—Ö—ñ–≤—É"""
    homework_id = callback.data.replace("hw_download_", "")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –î–ó
        homework = await HomeworkManager.get_homework_by_id(homework_id)
        if not homework:
            await callback.answer("‚ùå –î–ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        submissions = homework.get('submissions', [])
        if not submissions:
            await callback.answer("‚ùå –§–∞–π–ª—ñ–≤ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ–º–∞—î")
            return
        
        await callback.answer("üìÅ –ì–æ—Ç—É—é –∞—Ä—Ö—ñ–≤ –∑ —Ñ–∞–π–ª–∞–º–∏...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ ZIP –∞—Ä—Ö—ñ–≤ –≤ –ø–∞–º'—è—Ç—ñ
        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            file_count = 0
            
            for submission in submissions:
                student_name = submission.get('full_name', submission.get('username', f"user_{submission['user_id']}"))
                file_ids = submission.get('file_ids', [])
                text_answer = submission.get('text_answer')
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
                student_folder = f"{student_name.replace('/', '_')}/"
                
                # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫—â–æ —î
                if text_answer:
                    zip_file.writestr(
                        f"{student_folder}answer.txt",
                        f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ {student_name}:\n\n{text_answer}"
                    )
                
                # –î–æ–¥–∞—î–º–æ —Ñ–∞–π–ª–∏ (—Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ Telegram)
                for i, file_id in enumerate(file_ids, 1):
                    try:
                        # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª –≤—ñ–¥ Telegram
                        file = await callback.bot.get_file(file_id)
                        file_data = await callback.bot.download_file(file.file_path)
                        
                        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
                        file_name = f"file_{i}"
                        if file.file_path:
                            file_name = file.file_path.split('/')[-1]
                        
                        zip_file.writestr(f"{student_folder}{file_name}", file_data.read())
                        file_count += 1
                        
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É {file_id}: {e}")
        
        if file_count == 0:
            await callback.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏")
            return
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞—Ä—Ö—ñ–≤
        zip_buffer.seek(0)
        
        await callback.message.answer_document(
            document=zip_buffer,
            filename=f"{homework['subject_name']}_{homework['title']}.zip",
            caption=f"üìÅ –ê—Ä—Ö—ñ–≤ –∑ —Ä–æ–±–æ—Ç–∞–º–∏ –ø–æ –∑–∞–≤–¥–∞–Ω–Ω—é:\n"
                   f"üìö {homework['subject_name']}\n"
                   f"üìã {homework['title']}\n"
                   f"üìä –§–∞–π–ª—ñ–≤: {file_count}"
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É")

@router.callback_query(F.data == "hw_names")
async def manage_student_names(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–º–µ–Ω–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤"""
    students_without_names = await StudentProfileManager.get_students_without_names()
    
    if not students_without_names:
        await callback.message.edit_text(
            "‚úÖ –£ –≤—Å—ñ—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–≤–Ω—ñ —ñ–º–µ–Ω–∞!"
        )
        return
    
    response = "üë• **–°—Ç—É–¥–µ–Ω—Ç–∏ –±–µ–∑ –ø–æ–≤–Ω–∏—Ö —ñ–º–µ–Ω:**\n\n"
    keyboard = []
    
    for student in students_without_names:
        username = student.get('username', '–ë–µ–∑ username')
        first_name = student.get('first_name', '')
        user_id = student['user_id']
        
        display_name = f"{first_name} (@{username})" if first_name else f"@{username}"
        response += f"‚Ä¢ {display_name}\n"
        
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚úèÔ∏è {display_name}",
                callback_data=f"set_name_{user_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="hw_back_menu")
    ])
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("set_name_"))
async def set_student_name_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    user_id = int(callback.data.replace("set_name_", ""))
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    from database.models import GroupMembersManager
    members = await GroupMembersManager.get_all_members()
    student = next((m for m in members if m['user_id'] == user_id), None)
    
    if not student:
        await callback.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    username = student.get('username', '–ë–µ–∑ username')
    first_name = student.get('first_name', '')
    
    await state.update_data(target_user_id=user_id)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:**\n\n"
        f"üë§ **Telegram:** {first_name} (@{username})\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ —ñ–º'—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ–±–∞—Ç—å–∫–æ–≤—ñ):"
    )
    
    await state.set_state(SetStudentNameStates.waiting_for_name)

@router.message(SetStudentNameStates.waiting_for_name)
async def process_student_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    full_name = message.text.strip()
    
    if len(full_name) < 5:
        await message.answer("‚ùå –ü–æ–≤–Ω–µ —ñ–º'—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    user_id = data['target_user_id']
    
    success = await StudentProfileManager.set_student_name(user_id, full_name)
    
    if success:
        await message.answer(f"‚úÖ –Ü–º'—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {full_name}")
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ")
    
    await state.clear()

@router.callback_query(F.data.startswith("hw_remind_"))
async def send_homework_reminder(callback: CallbackQuery):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –î–ó"""
    homework_id = callback.data.replace("hw_remind_", "")
    
    homework = await HomeworkManager.get_homework_by_id(homework_id)
    if not homework:
        await callback.answer("‚ùå –î–ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ö—Ç–æ —â–µ –Ω–µ –∑–¥–∞–≤
    submitted_users = {sub['user_id'] for sub in homework.get('submissions', [])}
    
    from database.models import GroupMembersManager
    all_members = await GroupMembersManager.get_all_members()
    not_submitted = [m for m in all_members if m['user_id'] not in submitted_users]
    
    if not not_submitted:
        await callback.answer("‚úÖ –í—Å—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏ –≤–∂–µ –∑–¥–∞–ª–∏ –î–ó!")
        return
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—É
    reminder_text = f"üîî **–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è!**\n\n"
    reminder_text += f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {homework['subject_name']}\n"
    reminder_text += f"üìã **–ó–∞–≤–¥–∞–Ω–Ω—è:** {homework['title']}\n"
    reminder_text += f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {homework['deadline'].strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
    time_left = homework['deadline'] - datetime.utcnow()
    if time_left.days > 0:
        reminder_text += f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {time_left.days} –¥–Ω—ñ–≤\n\n"
    elif time_left.seconds > 0:
        hours_left = time_left.seconds // 3600
        reminder_text += f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {hours_left} –≥–æ–¥–∏–Ω\n\n"
    
    reminder_text += f"‚ùóÔ∏è –ù–µ –∑–¥–∞–ª–∏: {len(not_submitted)} —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤\n"
    reminder_text += "üí° –î–ª—è –∑–¥–∞—á—ñ –ø–∏—à—ñ—Ç—å –±–æ—Ç—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!"
    
    await callback.bot.send_message(
        chat_id=GROUP_ID,
        text=reminder_text
    )
    
    await callback.answer("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø—É!")

@router.callback_query(F.data.startswith("hw_close_"))
async def close_homework(callback: CallbackQuery):
    """–ó–∞–∫—Ä–∏—Ç—Ç—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
    homework_id = callback.data.replace("hw_close_", "")
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –∑–∞–∫—Ä–∏—Ç–∏", callback_data=f"hw_close_confirm_{homework_id}"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"hw_view_{homework_id}")
        ]
    ]
    
    await callback.message.edit_text(
        "‚ùóÔ∏è **–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç—Ç—è –î–ó**\n\n"
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–∫—Ä–∏—Ç–∏ —Ü–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è?\n"
        "–ü—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è —Å—Ç—É–¥–µ–Ω—Ç–∏ –Ω–µ –∑–º–æ–∂—É—Ç—å –∑–¥–∞–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("hw_close_confirm_"))
async def confirm_close_homework(callback: CallbackQuery):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç—Ç—è –î–ó"""
    homework_id = callback.data.replace("hw_close_confirm_", "")
    
    success = await HomeworkManager.close_homework(homework_id)
    
    if success:
        await callback.message.edit_text("‚úÖ –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ!")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤ –≥—Ä—É–ø—É
        await callback.bot.send_message(
            chat_id=GROUP_ID,
            text="üîí **–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ!**\n\n"
                 "–ü—Ä–∏–π–æ–º —Ä–æ–±—ñ—Ç –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ."
        )
    else:
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –î–ó")

@router.callback_query(F.data == "hw_back_menu")
async def back_to_homework_menu(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –î–ó"""
    await homework_admin_menu(callback.message, True)