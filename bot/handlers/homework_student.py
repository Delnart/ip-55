# bot/handlers/homework_student.py - –ù–û–í–ò–ô –§–ê–ô–õ

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from database.homework import HomeworkManager, StudentProfileManager, FileManager
from config import GROUP_ID
import logging

logger = logging.getLogger(__name__)
router = Router()

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class SubmitHomeworkStates(StatesGroup):
    waiting_for_homework_selection = State()
    waiting_for_files = State()
    waiting_for_text_answer = State()
    confirming_submission = State()

class SetNameStates(StatesGroup):
    waiting_for_name = State()

@router.message(F.text == "üìù –ú–æ—ó –î–ó", ~F.chat.id.in_({GROUP_ID}))
async def my_homework_menu(message: Message):
    """–ú–µ–Ω—é –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ñ–º'—è
    full_name = await StudentProfileManager.get_student_name(message.from_user.id)
    
    if not full_name:
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–º'—è", callback_data="set_my_name")]
        ]
        
        await message.answer(
            "‚ùóÔ∏è **–£–≤–∞–≥–∞!**\n\n"
            "–î–ª—è –∑–¥–∞—á—ñ –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è.\n"
            "–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –≤–∏–∫–ª–∞–¥–∞—á—É —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à—É —Ä–æ–±–æ—Ç—É.\n\n"
            "üë§ **–ü–æ—Ç–æ—á–Ω–µ —ñ–º'—è:** –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –î–ó
    homework_list = await HomeworkManager.get_active_homework()
    my_submissions = await HomeworkManager.get_user_submissions(message.from_user.id)
    
    submitted_ids = {sub['homework_id'] for sub in my_submissions}
    
    keyboard = [
        [
            InlineKeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ñ –î–ó", callback_data="hw_active"),
            InlineKeyboardButton(text="üìä –ú–æ—ó –∑–¥–∞—á—ñ", callback_data="hw_my_submissions")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", callback_data="set_my_name")
        ]
    ]
    
    response = f"üìù **–î–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è**\n\n"
    response += f"üë§ **–í–∞—à–µ —ñ–º'—è:** {full_name}\n\n"
    response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –î–ó: {len(homework_list)}\n"
    response += f"‚Ä¢ –í–∏ –∑–¥–∞–ª–∏: {len(submitted_ids)}\n"
    response += f"‚Ä¢ –ù–µ –∑–¥–∞–Ω–æ: {len(homework_list) - len(submitted_ids)}\n"
    
    await message.answer(response, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

@router.callback_query(F.data == "set_my_name")
async def set_my_name_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ"""
    current_name = await StudentProfileManager.get_student_name(callback.from_user.id)
    
    response = "‚úèÔ∏è **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ**\n\n"
    response += "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
    response += "**–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ–±–∞—Ç—å–∫–æ–≤—ñ**\n\n"
    response += "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á\n\n"
    
    if current_name:
        response += f"üìù **–ü–æ—Ç–æ—á–Ω–µ —ñ–º'—è:** {current_name}\n"
    
    await callback.message.edit_text(response)
    await state.set_state(SetNameStates.waiting_for_name)
    await callback.answer()

@router.message(SetNameStates.waiting_for_name)
async def process_my_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ"""
    full_name = message.text.strip()
    
    if len(full_name) < 5:
        await message.answer("‚ùå –ü–æ–≤–Ω–µ —ñ–º'—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    if len(full_name.split()) < 2:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    success = await StudentProfileManager.set_student_name(message.from_user.id, full_name)
    
    if success:
        await message.answer(
            f"‚úÖ **–Ü–º'—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            f"üë§ **–í–∞—à–µ —ñ–º'—è:** {full_name}\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–¥–∞–≤–∞—Ç–∏ –¥–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è!"
        )
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    await state.clear()

@router.callback_query(F.data == "hw_active")
async def show_active_homework(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –î–ó"""
    homework_list = await HomeworkManager.get_active_homework()
    my_submissions = await HomeworkManager.get_user_submissions(callback.from_user.id)
    
    submitted_ids = {sub['homework_id'] for sub in my_submissions}
    
    if not homework_list:
        await callback.message.edit_text(
            "üì≠ **–ê–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î**\n\n"
            "–ö–æ–ª–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ."
        )
        return
    
    response = "üìã **–ê–∫—Ç–∏–≤–Ω—ñ –¥–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:**\n\n"
    keyboard = []
    
    for hw in homework_list:
        hw_id = str(hw['_id'])
        subject = hw['subject_name']
        title = hw['title']
        deadline = hw['deadline']
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
        if hw_id in submitted_ids:
            status = "‚úÖ –ó–¥–∞–Ω–æ"
            emoji = "‚úÖ"
        else:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ
            time_left = deadline - datetime.utcnow()
            if time_left.total_seconds() < 0:
                status = "‚ùå –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ"
                emoji = "‚ùå"
            elif time_left.days == 0 and time_left.seconds < 86400:  # –ú–µ–Ω—à–µ –¥–æ–±–∏
                status = "‚ö†Ô∏è –¢–µ—Ä–º—ñ–Ω–æ–≤–æ"
                emoji = "‚ö†Ô∏è"
            else:
                status = "‚è≥ –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–¥–∞—Ç–∏"
                emoji = "üìù"
        
        response += f"{emoji} **{subject}**\n"
        response += f"üìã {title}\n"
        response += f"‚è∞ –î–æ: {deadline.strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üìä {status}\n\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        if hw_id not in submitted_ids and time_left.total_seconds() > 0:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìù –ó–¥–∞—Ç–∏: {title[:15]}...",
                    callback_data=f"submit_hw_{hw_id}"
                )
            ])
        elif hw_id in submitted_ids:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üëÅ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏: {title[:15]}...",
                    callback_data=f"view_my_hw_{hw_id}"
                )
            ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="hw_back_student")
    ])
    
    await callback.message.edit_text(
        response, 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data == "hw_my_submissions")
async def show_my_submissions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ—ó –∑–¥–∞—á—ñ"""
    my_submissions = await HomeworkManager.get_user_submissions(callback.from_user.id)
    
    if not my_submissions:
        await callback.message.edit_text(
            "üì≠ **–í–∏ —â–µ –Ω–µ –∑–¥–∞–≤–∞–ª–∏ –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å**\n\n"
            "–ö–æ–ª–∏ –∑–¥–∞—Å—Ç–µ –ø–µ—Ä—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–æ–Ω–æ –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç."
        )
        return
    
    response = "üìä **–ú–æ—ó –∑–¥–∞—á—ñ:**\n\n"
    keyboard = []
    
    for submission in my_submissions:
        subject = submission['subject_name']
        title = submission['title']
        submitted_at = submission['submitted_at']
        deadline = submission['deadline']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–¥–∞–Ω–æ –≤—á–∞—Å–Ω–æ
        if submitted_at <= deadline:
            status = "‚úÖ –í—á–∞—Å–Ω–æ"
        else:
            status = "‚è∞ –Ü–∑ –∑–∞–ø—ñ–∑–Ω–µ–Ω–Ω—è–º"
        
        response += f"üìö **{subject}**\n"
        response += f"üìã {title}\n"
        response += f"üìÖ –ó–¥–∞–Ω–æ: {submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üìä {status}\n\n"
        
        keyboard.append([
            InlineKeyboardButton(
                text=f"üëÅ {title[:20]}...",
                callback_data=f"view_my_hw_{submission['homework_id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="hw_back_student")
    ])
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("submit_hw_"))
async def start_submit_homework(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –∑–¥–∞—á—ñ –î–ó"""
    homework_id = callback.data.replace("submit_hw_", "")
    
    homework = await HomeworkManager.get_homework_by_id(homework_id)
    if not homework:
        await callback.answer("‚ùå –î–ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–µ–¥–ª–∞–π–Ω
    if homework['deadline'] < datetime.utcnow():
        await callback.answer("‚ùå –î–µ–¥–ª–∞–π–Ω –º–∏–Ω—É–≤, –∑–¥–∞—á–∞ –Ω–µ–º–æ–∂–ª–∏–≤–∞", show_alert=True)
        return
    
    await state.update_data(homework_id=homework_id, files=[])
    
    response = f"üìù **–ó–¥–∞—á–∞ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è**\n\n"
    response += f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {homework['subject_name']}\n"
    response += f"üìã **–ó–∞–≤–¥–∞–Ω–Ω—è:** {homework['title']}\n"
    
    if homework['description']:
        response += f"üìù **–û–ø–∏—Å:** {homework['description']}\n"
    
    response += f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {homework['deadline'].strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
    time_left = homework['deadline'] - datetime.utcnow()
    if time_left.days > 0:
        response += f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {time_left.days} –¥–Ω—ñ–≤\n\n"
    elif time_left.seconds > 0:
        hours_left = time_left.seconds // 3600
        response += f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {hours_left} –≥–æ–¥–∏–Ω\n\n"
    
    response += "üìé **–ö—Ä–æ–∫ 1:** –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª–∏ (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∏) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'\n"
    response += "üí° –ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'"
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—ñ (–±–µ–∑ —Ñ–∞–π–ª—ñ–≤)", callback_data="hw_next_step"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="hw_back_student")
        ]
    ]
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    
    await state.set_state(SubmitHomeworkStates.waiting_for_files)

@router.message(SubmitHomeworkStates.waiting_for_files)
async def process_homework_files(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –î–ó"""
    data = await state.get_data()
    files = data.get('files', [])
    
    file_id = None
    file_name = "file"
    file_type = "unknown"
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤
    if message.photo:
        file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
        file_name = f"photo_{len(files) + 1}.jpg"
        file_type = "photo"
    elif message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name or f"document_{len(files) + 1}"
        file_type = "document"
    elif message.video:
        file_id = message.video.file_id
        file_name = f"video_{len(files) + 1}.mp4"
        file_type = "video"
    elif message.audio:
        file_id = message.audio.file_id
        file_name = message.audio.file_name or f"audio_{len(files) + 1}.mp3"
        file_type = "audio"
    elif message.voice:
        file_id = message.voice.file_id
        file_name = f"voice_{len(files) + 1}.ogg"
        file_type = "voice"
    
    if file_id:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª
        files.append({
            "file_id": file_id,
            "file_name": file_name,
            "file_type": file_type
        })
        
        await state.update_data(files=files)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
        await FileManager.save_file_info(
            file_id=file_id,
            user_id=message.from_user.id,
            file_name=file_name,
            file_type=file_type,
            homework_id=data['homework_id']
        )
        
        keyboard = [
            [
                InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—ñ", callback_data="hw_next_step"),
                InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="hw_back_student")
            ]
        ]
        
        await message.answer(
            f"‚úÖ **–§–∞–π–ª –¥–æ–¥–∞–Ω–æ:** {file_name}\n"
            f"üìä **–í—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤:** {len(files)}\n\n"
            "üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ñ–∞–π–ª–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É.\n"
            "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∏, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ, –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        )

@router.callback_query(F.data == "hw_next_step", SubmitHomeworkStates.waiting_for_files)
async def homework_text_step(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏"""
    data = await state.get_data()
    files = data.get('files', [])
    
    response = f"üìù **–ö—Ä–æ–∫ 2:** –¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å\n\n"
    
    if files:
        response += f"‚úÖ –§–∞–π–ª—ñ–≤ –¥–æ–¥–∞–Ω–æ: {len(files)}\n\n"
    
    response += "üí≠ –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.\n"
    response += "–Ø–∫—â–æ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –Ω–µ–º–∞—î, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'."
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="hw_final_step"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="hw_back_student")
        ]
    ]
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    
    await state.set_state(SubmitHomeworkStates.waiting_for_text_answer)

@router.message(SubmitHomeworkStates.waiting_for_text_answer)
async def process_homework_text(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
    text_answer = message.text.strip()
    
    if len(text_answer) > 4000:  # –û–±–º–µ–∂–µ–Ω–Ω—è Telegram
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    await state.update_data(text_answer=text_answer)
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ó–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É", callback_data="hw_final_step"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="hw_back_student")
        ]
    ]
    
    await message.answer(
        f"‚úÖ **–¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ–¥–∞–Ω–∞**\n\n"
        f"üìù **–ü–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤:** {text_answer[:100]}{'...' if len(text_answer) > 100 else ''}\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data == "hw_final_step")
async def final_submit_homework(callback: CallbackQuery, state: FSMContext):
    """–§—ñ–Ω–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–¥–∞—á—ñ"""
    data = await state.get_data()
    homework_id = data['homework_id']
    files = data.get('files', [])
    text_answer = data.get('text_answer', '')
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –î–ó
    homework = await HomeworkManager.get_homework_by_id(homework_id)
    if not homework:
        await callback.answer("‚ùå –î–ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    full_name = await StudentProfileManager.get_student_name(callback.from_user.id)
    if not full_name:
        await callback.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è")
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    response = f"üìã **–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–¥–∞—á—ñ**\n\n"
    response += f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {homework['subject_name']}\n"
    response += f"üìã **–ó–∞–≤–¥–∞–Ω–Ω—è:** {homework['title']}\n"
    response += f"üë§ **–°—Ç—É–¥–µ–Ω—Ç:** {full_name}\n\n"
    
    if files:
        response += f"üìé **–§–∞–π–ª—ñ–≤:** {len(files)}\n"
        for i, file_info in enumerate(files, 1):
            response += f"  {i}. {file_info['file_name']} ({file_info['file_type']})\n"
        response += "\n"
    
    if text_answer:
        response += f"üìù **–¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:** {len(text_answer)} —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
    
    if not files and not text_answer:
        response += "‚ö†Ô∏è **–£–≤–∞–≥–∞:** –í–∏ –∑–¥–∞—î—Ç–µ —Ä–æ–±–æ—Ç—É –±–µ–∑ —Ñ–∞–π–ª—ñ–≤ —ñ —Ç–µ–∫—Å—Ç—É!\n\n"
    
    response += "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–¥–∞—á—É –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:"
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é", callback_data="hw_confirm_submit"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="hw_back_student")
        ]
    ]
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    
    await state.set_state(SubmitHomeworkStates.confirming_submission)

@router.callback_query(F.data == "hw_confirm_submit", SubmitHomeworkStates.confirming_submission)
async def confirm_submit_homework(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–¥–∞—á—ñ"""
    data = await state.get_data()
    homework_id = data['homework_id']
    files = data.get('files', [])
    text_answer = data.get('text_answer', '')
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    full_name = await StudentProfileManager.get_student_name(callback.from_user.id)
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤—É—î–º–æ —Å–ø–∏—Å–æ–∫ file_id
    file_ids = [f['file_id'] for f in files]
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–¥–∞—á—É
    success = await HomeworkManager.submit_homework(
        homework_id=homework_id,
        user_id=callback.from_user.id,
        username=callback.from_user.username or '',
        full_name=full_name,
        file_ids=file_ids,
        text_answer=text_answer if text_answer else None
    )
    
    if success:
        homework = await HomeworkManager.get_homework_by_id(homework_id)
        
        await callback.message.edit_text(
            f"‚úÖ **–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!**\n\n"
            f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {homework['subject_name']}\n"
            f"üìã **–ó–∞–≤–¥–∞–Ω–Ω—è:** {homework['title']}\n"
            f"üìÖ **–ó–¥–∞–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üìä **–í–∞—à–∞ –∑–¥–∞—á–∞:**\n"
            f"‚Ä¢ –§–∞–π–ª—ñ–≤: {len(file_ids)}\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç: {'–Ñ' if text_answer else '–ù–µ–º–∞—î'}\n\n"
            "üéâ –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è!"
        )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        from config import ADMIN_ID
        try:
            await callback.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üìù **–ù–æ–≤–∞ –∑–¥–∞—á–∞ –î–ó!**\n\n"
                     f"üë§ **–°—Ç—É–¥–µ–Ω—Ç:** {full_name} (@{callback.from_user.username})\n"
                     f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {homework['subject_name']}\n"
                     f"üìã **–ó–∞–≤–¥–∞–Ω–Ω—è:** {homework['title']}\n"
                     f"üìé **–§–∞–π–ª—ñ–≤:** {len(file_ids)}\n"
                     f"üìù **–¢–µ–∫—Å—Ç:** {'–Ñ' if text_answer else '–ù–µ–º–∞—î'}"
            )
        except:
            pass  # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            
    else:
        await callback.message.edit_text(
            "‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑–¥–∞—á—ñ —Ä–æ–±–æ—Ç–∏!**\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
    
    await state.clear()

@router.callback_query(F.data.startswith("view_my_hw_"))
async def view_my_homework(callback: CallbackQuery):
    """–ü–µ—Ä–µ–≥–ª—è–¥ —Å–≤–æ—î—ó –∑–¥–∞—á—ñ"""
    homework_id = callback.data.replace("view_my_hw_", "")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –î–ó
    homework = await HomeworkManager.get_homework_by_id(homework_id)
    if not homework:
        await callback.answer("‚ùå –î–ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–≤–æ—é –∑–¥–∞—á—É
    my_submission = None
    for submission in homework.get('submissions', []):
        if submission['user_id'] == callback.from_user.id:
            my_submission = submission
            break
    
    if not my_submission:
        await callback.answer("‚ùå –ó–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    response = f"üëÅ **–ú–æ—è –∑–¥–∞—á–∞**\n\n"
    response += f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {homework['subject_name']}\n"
    response += f"üìã **–ó–∞–≤–¥–∞–Ω–Ω—è:** {homework['title']}\n"
    response += f"üìÖ **–ó–¥–∞–Ω–æ:** {my_submission['submitted_at'].strftime('%d.%m.%Y %H:%M')}\n"
    response += f"‚è∞ **–î–µ–¥–ª–∞–π–Ω –±—É–≤:** {homework['deadline'].strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –°—Ç–∞—Ç—É—Å –∑–¥–∞—á—ñ
    if my_submission['submitted_at'] <= homework['deadline']:
        response += "‚úÖ **–°—Ç–∞—Ç—É—Å:** –ó–¥–∞–Ω–æ –≤—á–∞—Å–Ω–æ\n\n"
    else:
        response += "‚è∞ **–°—Ç–∞—Ç—É—Å:** –ó–¥–∞–Ω–æ —ñ–∑ –∑–∞–ø—ñ–∑–Ω–µ–Ω–Ω—è–º\n\n"
    
    # –§–∞–π–ª–∏
    file_ids = my_submission.get('file_ids', [])
    if file_ids:
        response += f"üìé **–§–∞–π–ª—ñ–≤ –∑–¥–∞–Ω–æ:** {len(file_ids)}\n"
    
    # –¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    text_answer = my_submission.get('text_answer')
    if text_answer:
        response += f"üìù **–¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:** {len(text_answer)} —Å–∏–º–≤–æ–ª—ñ–≤\n"
        if len(text_answer) <= 200:
            response += f"üí≠ *{text_answer}*\n"
        else:
            response += f"üí≠ *{text_answer[:200]}...*\n"
    
    keyboard = [
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="hw_my_submissions")]
    ]
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data == "hw_back_student")
async def back_to_student_menu(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–æ–≥–æ –º–µ–Ω—é"""
    await my_homework_menu(callback.message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –î–ó
@router.message(Command("homework", "–¥–∑"), ~F.chat.id.in_({GROUP_ID}))
async def homework_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /homework –∞–±–æ /–¥–∑ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É"""
    await my_homework_menu(message)