import aiohttp
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from config import KPI_API_URL, DAYS_TRANSLATION, CLASS_TYPES, TIMEZONE
import pytz
import logging

logger = logging.getLogger(__name__)

class ScheduleAPI:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API —Ä–æ–∑–∫–ª–∞–¥—É –ö–ü–Ü"""
    
    @staticmethod
    def get_week_number(date: datetime) -> int:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ç–∏–∂–Ω—è (1 - –ø–µ—Ä—à–∏–π, 2 - –¥—Ä—É–≥–∏–π)"""
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ naive datetime –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å
        if date.tzinfo is not None:
            date = date.replace(tzinfo=None)
        
        # –ü–æ—á–∞—Ç–æ–∫ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∫—É (1 –≤–µ—Ä–µ—Å–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∫—É)
        year = date.year
        if date.month < 9:  # –Ø–∫—â–æ –¥–æ –≤–µ—Ä–µ—Å–Ω—è - –±–µ—Ä–µ–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–∫
            year -= 1
        
        # 1 –≤–µ—Ä–µ—Å–Ω—è —è–∫ –ø–æ—á–∞—Ç–æ–∫ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∫—É
        start_of_year = datetime(year, 9, 1)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∫—É
        days_since_monday = start_of_year.weekday()
        first_monday = start_of_year - timedelta(days=days_since_monday)
        
        # –†—ñ–∑–Ω–∏—Ü—è –≤ —Ç–∏–∂–Ω—è—Ö –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∫—É
        weeks_diff = (date - first_monday).days // 7
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 1 –∞–±–æ 2 (–ø–µ—Ä—à–∏–π –∞–±–æ –¥—Ä—É–≥–∏–π —Ç–∏–∂–¥–µ–Ω—å)
        return (weeks_diff % 2) + 1
    
    @staticmethod
    async def get_schedule() -> Optional[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –∑ API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(KPI_API_URL) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data
                    else:
                        logger.error(f"API –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞—Ç—É—Å {response.status}")
                        return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –∑ API: {e}")
            return None
    
    @staticmethod
    async def format_class_info(class_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–∞—Ä—É –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏"""
        from database.models import LinksManager
        
        class_type = CLASS_TYPES.get(class_data.get('type', ''), class_data.get('type', ''))
        time = class_data.get('time', '')
        name = class_data.get('name', '')
        teacher = class_data.get('teacherName', '')
        place = class_data.get('place', '')
        
        info = f"{class_type} {time}\n"
        info += f"üìñ {name}\n"
        info += f"üë®‚Äçüè´ {teacher}\n"
        
        if place:
            info += f"üìç {place}\n"
        
        # –ù–û–í–ï: –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó –ø–∞—Ä–∏
        link_data = await LinksManager.get_link(name, teacher, class_data.get('type', ''))
        
        if link_data:
            meet_link = link_data.get('meet_link')
            classroom_link = link_data.get('classroom_link')
            
            if meet_link:
                info += f"üîó [–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ]({meet_link})\n"
            
            if classroom_link:
                info += f"üìñ [Google Classroom]({classroom_link})\n"
        else:
            info += f"‚ö†Ô∏è –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –¥–æ–¥–∞–Ω—ñ\n"
        
        return info
    
    @staticmethod
    async def get_today_schedule() -> str:
        """–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏"""
        try:
            schedule_data = await ScheduleAPI.get_schedule()
            if not schedule_data:
                return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥"
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —Ç–∞ —Ç–∏–∂–¥–µ–Ω—å
            kiev_tz = pytz.timezone(TIMEZONE)
            now = datetime.now(kiev_tz)
            today = now.strftime('%A')
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–∂–Ω—è
            week_number = ScheduleAPI.get_week_number(now)
            week_key = 'scheduleFirstWeek' if week_number == 1 else 'scheduleSecondWeek'
            
            # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –Ω–∞–∑–≤—É –¥–Ω—è
            day_mapping = {
                'Monday': '–ü–Ω',
                'Tuesday': '–í–≤',
                'Wednesday': '–°—Ä',
                'Thursday': '–ß—Ç',
                'Friday': '–ü—Ç',
                'Saturday': '–°–±'
            }
            
            day_code = day_mapping.get(today)
            if not day_code:
                return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –¥–µ–Ω—å —Ç–∏–∂–Ω—è"
            
            # –®—É–∫–∞—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            week_schedule = schedule_data.get(week_key, [])
            today_classes = None
            
            for day_data in week_schedule:
                if day_data.get('day') == day_code:
                    today_classes = day_data.get('pairs', [])
                    break
            
            if not today_classes:
                return f"üìÖ –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({DAYS_TRANSLATION[day_code]}) –ø–∞—Ä –Ω–µ–º–∞—î"
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
            week_name = "1-–π —Ç–∏–∂–¥–µ–Ω—å" if week_number == 1 else "2-–π —Ç–∏–∂–¥–µ–Ω—å"
            result = f"üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({DAYS_TRANSLATION[day_code]}, {week_name}):\n\n"
            
            for i, class_data in enumerate(today_classes, 1):
                class_info = await ScheduleAPI.format_class_info(class_data)
                result += f"{i}. {class_info}\n"
            
            return result
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {e}")
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É"
    
    @staticmethod
    async def get_tomorrow_schedule() -> str:
        """–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏"""
        try:
            schedule_data = await ScheduleAPI.get_schedule()
            if not schedule_data:
                return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥"
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤—Ç—Ä–∞—à–Ω—ñ–π –¥–µ–Ω—å
            kiev_tz = pytz.timezone(TIMEZONE)
            tomorrow = datetime.now(kiev_tz) + timedelta(days=1)
            tomorrow_day = tomorrow.strftime('%A')
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–∂–Ω—è
            week_number = ScheduleAPI.get_week_number(tomorrow)
            week_key = 'scheduleFirstWeek' if week_number == 1 else 'scheduleSecondWeek'
            
            # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –Ω–∞–∑–≤—É –¥–Ω—è
            day_mapping = {
                'Monday': '–ü–Ω',
                'Tuesday': '–í–≤',
                'Wednesday': '–°—Ä',
                'Thursday': '–ß—Ç',
                'Friday': '–ü—Ç',
                'Saturday': '–°–±',
                'Sunday': '–ü–Ω'  # –ù–µ–¥—ñ–ª—è -> –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø–æ–Ω–µ–¥—ñ–ª–æ–∫
            }
            
            day_code = day_mapping.get(tomorrow_day)
            if not day_code:
                return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –¥–µ–Ω—å —Ç–∏–∂–Ω—è"
            
            # –Ø–∫—â–æ –∑–∞–≤—Ç—Ä–∞ –Ω–µ–¥—ñ–ª—è, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫
            if tomorrow_day == 'Sunday':
                tomorrow = tomorrow + timedelta(days=1)
                week_number = ScheduleAPI.get_week_number(tomorrow)
                week_key = 'scheduleFirstWeek' if week_number == 1 else 'scheduleSecondWeek'
            
            # –®—É–∫–∞—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            week_schedule = schedule_data.get(week_key, [])
            tomorrow_classes = None
            
            for day_data in week_schedule:
                if day_data.get('day') == day_code:
                    tomorrow_classes = day_data.get('pairs', [])
                    break
            
            if not tomorrow_classes:
                return f"üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞ ({DAYS_TRANSLATION[day_code]}) –ø–∞—Ä –Ω–µ–º–∞—î"
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
            week_name = "1-–π —Ç–∏–∂–¥–µ–Ω—å" if week_number == 1 else "2-–π —Ç–∏–∂–¥–µ–Ω—å"
            result = f"üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({DAYS_TRANSLATION[day_code]}, {week_name}):\n\n"
            
            for i, class_data in enumerate(tomorrow_classes, 1):
                class_info = await ScheduleAPI.format_class_info(class_data)
                result += f"{i}. {class_info}\n"
            
            return result
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É"
    
    @staticmethod
    async def get_week_schedule(week_offset: int = 0) -> str:
        """–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ (0 - –ø–æ—Ç–æ—á–Ω–∏–π, 1 - –Ω–∞—Å—Ç—É–ø–Ω–∏–π)"""
        try:
            schedule_data = await ScheduleAPI.get_schedule()
            if not schedule_data:
                return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥"
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–∂–¥–µ–Ω—å
            kiev_tz = pytz.timezone(TIMEZONE)
            target_date = datetime.now(kiev_tz) + timedelta(weeks=week_offset)
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–∂–Ω—è
            week_number = ScheduleAPI.get_week_number(target_date)
            week_key = 'scheduleFirstWeek' if week_number == 1 else 'scheduleSecondWeek'
            
            week_name = "–ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å" if week_offset == 0 else "–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å"
            week_type = "1-–π —Ç–∏–∂–¥–µ–Ω—å" if week_number == 1 else "2-–π —Ç–∏–∂–¥–µ–Ω—å"
            
            week_schedule = schedule_data.get(week_key, [])
            
            if not week_schedule:
                return f"‚ùå –†–æ–∑–∫–ª–∞–¥ –Ω–∞ {week_name.lower()} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            result = f"üìÖ {week_name} ({week_type}):\n\n"
            
            for day_data in week_schedule:
                day_code = day_data.get('day')
                day_name = DAYS_TRANSLATION.get(day_code, day_code)
                pairs = day_data.get('pairs', [])
                
                if pairs:
                    result += f"üìå {day_name}:\n"
                    for i, class_data in enumerate(pairs, 1):
                        class_info = await ScheduleAPI.format_class_info(class_data)
                        result += f"{i}. {class_info}\n"
                    result += "\n"
            
            return result
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å: {e}")
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É"