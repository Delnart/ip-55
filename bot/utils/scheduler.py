import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional
import pytz
from aiogram import Bot
from bot.utils.api import ScheduleAPI
from database.models import LinksManager
from config import GROUP_ID, NOTIFICATION_MINUTES_BEFORE, TIMEZONE

logger = logging.getLogger(__name__)

class NotificationScheduler:
    """–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–∞—Ä–∏"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.is_running = False
        self.task = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        if not self.is_running:
            self.is_running = True
            self.task = asyncio.create_task(self._schedule_loop())
            logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–ø—É—â–µ–Ω–æ")
    
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    async def _schedule_loop(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        while self.is_running:
            try:
                await self._check_upcoming_classes()
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
                await asyncio.sleep(60)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—É: {e}")
                await asyncio.sleep(60)
    
    async def _check_upcoming_classes(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–∞—Ä —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        try:
            schedule_data = await ScheduleAPI.get_schedule()
            if not schedule_data:
                return
            
            kiev_tz = pytz.timezone(TIMEZONE)
            now = datetime.now(kiev_tz)
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —Ç–∞ —Ç–∏–∂–¥–µ–Ω—å
            today = now.strftime('%A')
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–∂–Ω—è
            week_number = ScheduleAPI.get_week_number(now)
            week_key = 'scheduleFirstWeek' if week_number == 1 else 'scheduleSecondWeek'
            
            # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –Ω–∞–∑–≤—É –¥–Ω—è
            day_mapping = {
                'Monday': '–ü–Ω',
                'Tuesday': '–í–≤', 
                'Wednesday': '–°—Ä',
                'Thursday': '–ß—Ç',
                'Friday': '–ü—Ç',
                'Saturday': '–°–±'
            }
            
            day_code = day_mapping.get(today)
            if not day_code:
                return
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            week_schedule = schedule_data.get(week_key, [])
            today_classes = None
            
            for day_data in week_schedule:
                if day_data.get('day') == day_code:
                    today_classes = day_data.get('pairs', [])
                    break
            
            if not today_classes:
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –ø–∞—Ä—É
            for class_data in today_classes:
                await self._check_class_notification(class_data, now)
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–∞—Ä: {e}")
    
    async def _check_class_notification(self, class_data: dict, current_time: datetime):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–∞—Ä–∏ –Ω–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        try:
            class_time_str = class_data.get('time', '')
            if not class_time_str:
                return
            
            # –ü–∞—Ä—Å–∏–º–æ —á–∞—Å –ø–∞—Ä–∏
            try:
                class_time = datetime.strptime(class_time_str, '%H:%M:%S').time()
            except ValueError:
                try:
                    class_time = datetime.strptime(class_time_str, '%H:%M').time()
                except ValueError:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–∞—Ä—Å–∏—Ç–∏ —á–∞—Å: {class_time_str}")
                    return
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ datetime –æ–±'—î–∫—Ç –¥–ª—è –ø–∞—Ä–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            kiev_tz = pytz.timezone(TIMEZONE)
            today = current_time.date()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ naive datetime —ñ –ø–æ—Ç—ñ–º –ª–æ–∫–∞–ª—ñ–∑—É—î–º–æ
            class_datetime_naive = datetime.combine(today, class_time)
            class_datetime = kiev_tz.localize(class_datetime_naive)
            
            # –ß–∞—Å –∫–æ–ª–∏ —Ç—Ä–µ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            notification_time = class_datetime - timedelta(minutes=NOTIFICATION_MINUTES_BEFORE)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Ö–≤–∏–ª–∏–Ω–∏
            time_diff = (notification_time - current_time).total_seconds()
            
            # –Ø–∫—â–æ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 60 —Å–µ–∫—É–Ω–¥
            if 0 <= time_diff <= 60:
                await self._send_class_notification(class_data)
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –ø–∞—Ä–∏: {e}")
    
    async def _send_class_notification(self, class_data: dict):
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–∞—Ä—É"""
        try:
            subject_name = class_data.get('name', '')
            teacher_name = class_data.get('teacherName', '')
            class_type = class_data.get('type', '')
            class_time = class_data.get('time', '')
            place = class_data.get('place', '')
            
            # –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            link_data = await LinksManager.get_link(subject_name, teacher_name, class_type)
            
            if not link_data:
                logger.info(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è: {subject_name} - {teacher_name} ({class_type})")
                return
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = f"üîî **–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–∞—Ä—É —á–µ—Ä–µ–∑ {NOTIFICATION_MINUTES_BEFORE} —Ö–≤–∏–ª–∏–Ω!**\n\n"
            message += f"‚è∞ **–ß–∞—Å:** {class_time}\n"
            message += f"üìö **–ü—Ä–µ–¥–º–µ—Ç:** {subject_name}\n"
            message += f"üë®‚Äçüè´ **–í–∏–∫–ª–∞–¥–∞—á:** {teacher_name}\n"
            message += f"üìù **–¢–∏–ø:** {class_type}\n"
            
            if place:
                message += f"üìç **–ú—ñ—Å—Ü–µ:** {place}\n"
            
            message += "\n"
            
            # –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            meet_link = link_data.get('meet_link')
            classroom_link = link_data.get('classroom_link')
            
            if meet_link:
                message += f"üîó [–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ]({meet_link})\n"
            
            if classroom_link:
                message += f"üìñ [Google Classroom]({classroom_link})\n"
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É
            await self.bot.send_message(
                chat_id=GROUP_ID,
                text=message,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–∞—Ä—É: {subject_name} - {teacher_name}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")