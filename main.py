import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from database.connection import db
from bot.handlers import admin, schedule, group
from bot.middlewares.auth import AuthMiddleware
from bot.utils.scheduler import NotificationScheduler
from config import BOT_TOKEN, GROUP_ID

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

async def debug_message(message):
    """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    logger.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{message.text}' –≤—ñ–¥ {message.from_user.username} –≤ —á–∞—Ç—ñ {message.chat.id} (—Ç–∏–ø: {message.chat.type})")
    logger.info(f"üîç –û—á—ñ–∫—É–≤–∞–Ω–∏–π GROUP_ID: {GROUP_ID}")
    logger.info(f"‚úÖ –°–ø—ñ–≤–ø–∞–¥–∞—î: {message.chat.id == GROUP_ID}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
        bot = Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
        )
        
        dp = Dispatcher()
        
        # –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        @dp.message()
        async def log_all_messages(message):
            await debug_message(message)
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è handlers –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        dp.include_router(group.router)  # –ì—Ä—É–ø–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –ø–µ—Ä—à–∏–º–∏
        
        # Middleware —Ç—ñ–ª—å–∫–∏ –¥–ª—è –Ω–µ-–≥—Ä—É–ø–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        dp.include_router(admin.router)
        admin.router.message.middleware(AuthMiddleware())
        admin.router.callback_query.middleware(AuthMiddleware())
        
        dp.include_router(schedule.router)
        schedule.router.message.middleware(AuthMiddleware())
        schedule.router.callback_query.middleware(AuthMiddleware())
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        await db.connect()
        logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        scheduler = NotificationScheduler(bot)
        await scheduler.start()
        logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–ø—É—â–µ–Ω–æ")
        
        logger.info(f"üîß –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π GROUP_ID: {GROUP_ID}")
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é!")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        # –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        await db.disconnect()
        if 'scheduler' in locals():
            await scheduler.stop()
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main())